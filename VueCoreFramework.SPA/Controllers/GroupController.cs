using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using VueCoreFramework.Core.Models;

namespace VueCoreFramework.Controllers
{
    /// <summary>
    /// An MVC controller for handling group membership tasks.
    /// </summary>
    [Authorize]
    public class GroupController : Controller
    {
        private readonly RoleManager<IdentityRole> _roleManager;
        private readonly UserManager<ApplicationUser> _userManager;

        /// <summary>
        /// Initializes a new instance of <see cref="GroupController"/>.
        /// </summary>
        public GroupController(RoleManager<IdentityRole> roleManager, UserManager<ApplicationUser> userManager)
        {
            _roleManager = roleManager;
            _userManager = userManager;
        }

        /// <summary>
        /// The endpoint reached when a user clicks a link in an email generated by the InviteUserToGroup action.
        /// </summary>
        /// <param name="userId">
        /// The ID of the user to add to the group.
        /// </param>
        /// <param name="groupId">The ID of the group to which the user will be added.</param>
        /// <param name="code">A verification code. Auto-generated.</param>
        /// <returns>
        /// Redirect to an error page in the event of a bad request; or to the group management page if successful.
        /// </returns>
        [HttpGet]
        public async Task<IActionResult> AddUserToGroup(string userId, string groupId, string code)
        {
            if (userId == null || code == null)
            {
                return RedirectToAction(nameof(HomeController.Index), new { forwardUrl = "/error/400" });
            }
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null || user.AdminLocked)
            {
                return RedirectToAction(nameof(HomeController.Index), new { forwardUrl = "/error/400" });
            }
            var groupRole = await _roleManager.FindByIdAsync(groupId);
            if (groupRole == null)
            {
                return RedirectToAction(nameof(HomeController.Index), new { forwardUrl = "/error/400" });
            }
            var result = await _userManager.ConfirmEmailAsync(user, code);
            if (!result.Succeeded)
            {
                return RedirectToAction(nameof(HomeController.Index), new { forwardUrl = "/error/400" });
            }

            await _userManager.AddToRoleAsync(user, groupRole.Name);
            return RedirectToAction(nameof(HomeController.Index), new { forwardUrl = "/group/manage" });
        }
    }
}
